(setq *format-only* t)

(def-predicate (closed-in a b)
  (open-in (the-set-difference-of b a) b)
  (format "~a is a closed subset of ~a"))

(def-term (the-graph-of f)
  ()
  (format "the graph of ~a"))

(def-term (the-domain-of f)
  ()
  (format "the domain of ~a"))

(def-term (the-product-top-space-of a b)
  ()
  (format "the product topological space of ~a and ~a"))

(def-term (the-product-of a b)
  ()
  (format "the cartesian product of ~a and ~a"))

(def-term (apply a b)
  ()
  (format "{~a}(~a)"))

(def-term (the-ordered-pair a b)
  ()
  (format "<~a, ~a>"))

(def-term (coerce-to-class x)
  ()
  (format "the class associated with ~a")
  )

(def-predicate (open-in a x)
  ()
  (format "~a is open in ~a")
  )

(def-predicate (a-function-from-to f x y)
  ()
  (format "~a is a function from ~a to ~a")
  )

(def-term (the-set-inverse-image-of f a)
  ()
  (format "{~a}^{-1}(~a)")
  )

(setq *format-only* nil)

(def-theorem closed-subset-thm
  (iff (closed-in a x)
       (forall ((y)) (implies (and (a-member-of y (coerce-to-class x))
				   (not (a-member-of y a)))
		       (for-some ((g))
			 (and (a-member-of y g)
			      (open-in g x)
			      (disjoint g a))))))
  (string "a simple theorem about closed sets"))

(def-predicate (a-hausdorff-top-space x)
  (forall ((a) (b))
    (implies (and (a-member-of a (coerce-to-class x))
		  (a-member-of b (coerce-to-class x))
		  (not (= a b)))
      (for-some ((g1) (g2))
	(and (open-in g1 x) (open-in g2 x)
	     (a-member-of a g1) (a-member-of b g2)
	     (disjoint g1 g2)))))
  (string "the definition of a Hausdorff space")
  (format "~a is a Hausdorff space"))

(def-predicate (a-continuous-function-from-to f x y)
  (and (a-function-from-to f (coerce-to-class x) (coerce-to-class y))
       (forall ((g)) (implies (open-in g y)
		       (open-in (the-set-inverse-image-of f g) x))))
  (string "the definition of a continuous function")
  (format "~a : ~a --> ~a is a continuous function"))

(def-theorem product-of-open-sets
  (implies (and (open-in a x) (open-in b y))
    (open-in (the-product-of a b) (the-product-top-space-of x y)))
  (string "a basic fact about the product topology"))

(def-theorem product-top		; a definition
  (implies (a-member-of x (coerce-to-class (the-product-top-space-of s t)))
    (for-some ((a) (b)) (and (a-member-of a (coerce-to-class s))
			     (a-member-of b (coerce-to-class t))
			     (= x (the-ordered-pair a b)))))
  (string "a basic fact about product topologies"))

(def-theorem product			; a definition
  (iff (a-member-of x (the-product-of s t))
       (for-some ((a) (b))
	 (and (a-member-of a s) (a-member-of b t)
	      (= x (the-ordered-pair a b)))))
  (string "a basic fact about products"))

(def-predicate (disjoint a b)
  (not (for-some ((y)) (and (a-member-of y a) (a-member-of y b))))
  (string "the definition of disjoint")
  (format "~a and ~a are disjoint"))

(def-theorem inverse-image		; a definition
  (iff (a-member-of x (the-set-inverse-image-of f a))
       (a-member-of (apply f x) a))
  (string "a fact about inverse images"))

(def-theorem graph			; a definition
  (iff (a-member-of (the-ordered-pair a b) (the-graph-of f))
       (= b (apply f a)))
  (string "a fact about graphs"))

(def-theorem image			; a definition
  (implies (and (a-function-from-to f a b) (a-member-of x a))
    (a-member-of (apply f x) b))
  (string "a basic fact about functions"))

;;; from Abraham, Marsden, Raitu
;;; Manifolds, Tensor Analysis and Applications
(def-theorem challenge-AMR-1-4b
  (implies (and (a-continuous-function-from-to phi S T)
		(a-hausdorff-top-space T))
    (closed-in (the-graph-of phi) (the-product-top-space-of S T)))
  (string "Excercie 1.4.B in A/M/R"))

