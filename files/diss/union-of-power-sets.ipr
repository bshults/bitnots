(setq *format-only* t)

(def-term (the-union-of a b)
  ()
  (format "the union of ~a and ~a")
  )

(def-term (the-power-set-of a)
  ()
  (format "the power set of ~a")
  )

(setq *format-only* nil)

(def-predicate (a-subset-of a b)
  (forall ((x)) (implies (a-member-of x a)
		  (a-member-of x b)))
  (format "~a is a subset of ~a")
  (description "the definition of subset"))

(def-theorem union
  (iff (a-member-of x (the-union-of a b))
       (or (a-member-of x a)
	   (a-member-of x b)))
  (description "the definition of union"))

(def-theorem power-set
  (iff (a-member-of x (the-power-set-of y))
       (forall ((a)) (implies (a-member-of a x)
		       (a-member-of a y))))
  (description "the definition of power-set"))

;;; the theorem follows

;;; with the above knowledge (strange definition of power), it gets it
;;; right away:
;;; ?0U2TN2P?D?A0U2TN2P?D?A0U2TN2P?0U2TN2P?0U2S?0U
;;; 2TN2S?0U2TN2S?0U2

(def-theorem power-set
  (a-subset-of (the-union-of (the-power-set-of x) (the-power-set-of y))
	       (the-power-set-of (the-union-of x y))))

;;; If the regularity condition were applied, then this would be found
;;; instantly, even with the ordinary definition of power-set.

