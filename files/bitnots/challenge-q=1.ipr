;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Pelletier
;;; JAR v.2 n.2 1986
;;; Seventy-Five Problems for Testing Automatic Theorem Provers
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Propositional Logic

;;; 1

(def-target 1 (iff (implies (p) (q)) (implies (not (q)) (not (p)))))

;;; 2

(def-target 2 (iff (not (not (p))) (p)))

;;; 3

(def-target 3 (implies (not (implies (p) (q))) (implies (q) (p))))

;;; 4

(def-target 4 (iff (implies (not (p)) (q)) (implies (not (q)) (p))))

;;; 5

(def-target 5 (implies (implies (or (p) (q)) (or (p) (r)))
                (or (p) (implies (q) (r)))))

;;; 6

(def-target 6 (or (p) (not (p))))

;;; 7

(def-target 7 (or (p) (not (not (not (p))))))

;;; 8

(def-target 8 (implies (implies (implies (p) (q)) (p)) (p)))

;;; 9

(def-target 9 (implies (and (or (p) (q)) (or (not (p)) (q)) (or (p) (not (q))))
  (not (or (not (p)) (not (q))))))

;;; 10

(def-target 10 (implies (and (implies (q) (r))
	      (implies (r) (and (p) (q)))
	      (implies (p) (or (q) (r))))
  (iff (p) (q))))

;;; 11

(def-target 11 (iff (p) (p)))

;;; 12

(def-target 12 (iff (iff (iff (p) (q)) (r)) (iff (p) (iff (q) (r)))))

;;; 13

(def-target 13 (iff (or (p) (and (q) (r))) (and (or (p) (q)) (or (p) (r)))))

;;; 14

(def-target 14 (iff (iff (p) (q)) (and (or (q) (not (p))) (or (not (q)) (p)))))

;;; 15

(def-target 15 (iff (implies (p) (q)) (or (not (p)) (q))))

;;; 16

(def-target 16 (or (implies (p) (q)) (implies (q) (p))))

;;; 17

(def-target 17 (iff (implies (and (p) (implies (q) (r)))
       (s))
     (and (or (not (p)) (q) (s))
	  (or (not (p)) (not (r)) (s)))))

;;; Monadic Predicate Logic

;;; 20

(def-target 20 (implies (forall ((x) (y))
                          (for-some ((z))
                            (forall ((w))
                              (implies (and (p x) (q y))
                                (and (r z) (s w))))))
                 (for-some ((x) (y))
                   (implies (and (p x) (q y))
                     (for-some ((z)) (r z))))))

;;; 22

(def-target 22 (implies (forall ((x)) (iff (p) (f x))) (iff (p) (forall ((x)) (f x)))))

;;; 23

(def-target 23 (iff (forall ((x)) (or (p) (f x))) (or (p) (forall ((x)) (f x)))))

;;; 25

(def-target 25 (implies (and (for-some ((x)) (p x))
                             (forall ((x)) (implies (f x)
                                             (and (not (g x)) (r x))))
                             (forall ((x)) (implies (p x) (and (g x) (f x))))
                             (or (forall ((x)) (implies (p x) (q x)))
                                 (for-some ((x)) (and (p x) (r x)))))
                 (for-some ((x)) (and (q x) (p x)))))

;;; 28

(def-target 28 (implies (and (forall ((x)) (implies (p x) (forall ((x2)) (q x2))))
                             (implies (forall ((x)) (or (q x) (r x)))
                               (for-some ((x)) (and (q x) (s x))))
                             (implies (for-some ((x)) (s x))
                               (forall ((x)) (implies (f x) (g x)))))
                 (forall ((x)) (implies (and (p x) (f x)) (g x)))))

;;; 30

(def-target 30 (implies (and (forall ((x)) (implies (or (f x) (g x))
                                             (not (h x))))
                             (forall ((x)) (implies (implies (g x) (not (i x)))
                                             (and (f x) (h x)))))
                 (forall ((x)) (i x))))

;;; 31

(def-target 31 (implies (and (not (for-some ((x)) (and (f x) (or (g x) (h x)))))
                             (for-some ((x)) (and (i x) (f x)))
                             (forall ((x)) (implies (not (h x)) (j x))))
                 (for-some ((x)) (and (i x) (j x)))))

;;; 32

(def-target 32 (implies (and (forall ((x)) (implies (and (f x) (or (g x) (h x)))
                                             (i x)))
                             (forall ((x)) (implies (and (i x) (h x)) (j x)))
                             (forall ((x)) (implies (k x) (h x))))
                 (forall ((x)) (implies (and (f x) (k x)) (j x)))))

;;; 33

(def-target 33 (forall ((a) (b) (c))
                 (iff (forall ((x)) (implies (and (p a) (implies (p x) (p b)))
                                      (p c)))
                      (and (forall ((x)) (or (not (p a)) (p x) (p c)))
                           (or (not (p a)) (not (p b)) (p c))))))

;;; Full Predicate Logic

;;; 35

(def-target 35 (for-some ((x) (y))
                 (implies (p x y) (forall ((x2) (y2)) (p x2 y2)))))

;;; 36

(def-target 36 (implies (and (forall ((x)) (for-some ((y)) (f x y)))
                             (forall ((x)) (for-some ((y)) (g x y)))
                             (forall ((x) (y))
                               (implies (or (f x y) (g x y))
                                 (forall ((z))
                                   (implies (or (f y z) (g y z)) (h x z))))))
                 (forall ((x)) (for-some ((y)) (h x y)))))

;;; 40

(def-target 40 (implies (for-some ((y))
	   (forall ((x)) (iff (a-member-of x y) (a-member-of x x))))
                 (not (forall ((x))
                        (for-some ((y))
                          (forall ((z))
                            (iff (a-member-of z y)
                                 (not (a-member-of z x)))))))))

;;; 41

(def-target 41 (implies (forall ((z))
                          (for-some ((y))
                            (forall ((x))
                              (iff (a-member-of x y)
                                   (and (a-member-of x z)
                                        (not (a-member-of x x)))))))
(not (for-some ((z)) (forall ((x)) (a-member-of x z))))))

;;; 46

(def-target 46 (implies (and (forall ((x)) (implies (and (f x) (forall ((y))
						  (implies (and (f y)
								(h y x))
						    (g y))))
			      (g x)))	; no can do with c=8
	      (implies (for-some ((x)) (and (f x) (not (g x))))
		(for-some ((x)) (and (f x) (not (g x)) 
				     (forall ((y))
				       (implies (and (f y) (not (g y)))
					 (j x y))))))
	      (forall ((x) (y))
		(implies (and (f x) (f y) (h x y)) (not (j y x)))))
  (forall ((x)) (implies (f x) (g x)))))

;;; 57

(def-target 57 (forall ((a) (b) (c))
                 (implies (and (phi (f a b) (f b c))
                               (phi (f b c) (f a c))
                               (forall ((x) (y) (z))
                                 (implies (and (phi x y) (phi y z))
                                   (phi x z))))
                   (phi (f a b) (f a c)))))

;;; 60

(def-target 60 (forall ((x))
                 (iff (phi x (f x))
                      (for-some ((y))
                        (and (forall ((z))
                               (implies (phi z y)
                                 (phi z (f x))))
                             (phi x y))))))

;;; 62

(def-target 62 (forall ((a))
                 (implies (forall ((x)) (implies (and (phi a) (implies (phi x) (phi (f x))))
                                          (phi (f (f x)))))
                   (forall ((x))
                     (and (or (not (phi a)) (phi x) (phi (f (f x))))
                          (or (not (phi a)) (not (phi (f x))) (phi (f (f x)))))))))

;;; 70

;;;(def-target 70a (forall ((x) (y)) (t (i x (i y x)))))
;;;(def-target 70b (forall ((x) (y) (z)) (t (i (i x (i y z)) (i (i x y) (i x z))))))
;;;(def-target 70c (forall ((x) (y)) (t (i (i (n x) (n y)) (i y x)))))
;;;(def-target 70d (forall ((x) (y)) (implies (and (t (i x y)) (t x)) (t y)))))
;;;(def-target 70e (forall ((x) (y)) (t (i (b2 (i x y)) (i (b2 x) (b2 y))))))
;;;(def-target 70f (forall ((x)) (implies (t x) (t (b2 x)))))

;;; 71

(def-target 71a (iff (p1) (p1)))

(def-target 71b (iff (p1) (iff (p2) (iff (p1) (p2))))) ; 0.05

(def-target 71c (iff (p1) (iff (p2) (iff (p3) (iff (p1) (iff (p2) (p3)))))))

(def-target 71d (iff (p1)
                     (iff (p2) (iff (p3) ; 3.9
                                    (iff (p4) (iff (p1) 
                                                   (iff (p2)
                                                        (iff (p3) (p4)))))))))


;;; 72

;; propositional pigeon hole problems

;;; 74

;; graph problems



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Bledsoe 
;;; Challenge Problems in Elementary Calculus
;;; JAR v.6 n.3 1990
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; 1: 1-6, 7.2, 9.11, 10.11, 10.3, 11.3, 12

;;; 2: 1-6, 7.1, 8.1, 9.11, 10.11, 10.3, 11.3, 12

;;; 3: 1-6, 7.1, 8, 9.1, 9.2, 10.1, 10.2, 11.3, 12, 14, 15, 15.1

;;; 4: 1-6, 7, 8, 9.1, 9.2, 10.1, 10.2, 11.3, 12, 14, 15, 15.1, 16, 17, 20, 21, 22, 24, 25, 26

;;; 5: 1-6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15.1, 16, 17, 18, 20, 21, 22, 24, 25, 26

;;; 5=h: 1-6, 7, 8, 9.1, 9.2, 10.1, 10.2, 11.3, 12, 14, 15, 15.1, 16, 17

;;; 5=: 1-18

;; 1
;;(def-target bledsoe1 (or (<= e 0) (not (<= (d1 e) 0))))
;; 2
;;(def-target bledsoe2 (or (<= e 0) (not (<= (d2 e) 0))))
;; 3
;;(def-target bledsoe3 (or (<= e 0) (not (<= (|| (+ x (- (a)))) (d1 e)))
;;    (<= )))
;; 4

;; 5

;; 6

;; 7

;; 8

;; 9

;; 10

;; 11

;; 12

;; 13

;; 14

;; 15

;; 16

;; 17

;; 18

;; 19

;; 20

;; 21

;; 22

;; 23

;; 24

;; 25

;; 26

;; 27

;; 28

;; 29

;; 7.1

;; 7.2

;; 8.1

;; 9.1

;; 9.11

;; 9.2

;; 10.1

;; 10.11

;; 10.2

;; 10.3

;; 11.1

;; 11.2

;; 11.3

;; 13.1

;; 15.1

;; 16.1

;; 17.1

;; 17.2

;;; my very own

;; 47 Schubert's Steamroller

;; (def-target 47
;;   (implies (and (forall ((x)) (implies (wolf x) (animal x)))
;; 	      (forall ((x)) (implies (fox x) (animal x)))
;; 	      (forall ((x)) (implies (bird x) (animal x)))
;; 	      (forall ((x)) (implies (catepillar x) (animal x)))
;; 	      (forall ((x)) (implies (snail x) (animal x)))
;; 	      (for-some ((wolf)) (wolf wolf))
;; 	      (for-some ((fox)) (fox fox))
;; 	      (for-some ((bird)) (bird bird))
;; 	      (for-some ((catepillar)) (catepillar catepillar))
;; 	      (for-some ((snail)) (snail snail))
;; 	      (forall ((x)) (implies (grain x) (plant x)))
;; 	      (for-some ((grain)) (grain grain))
;; 	      (forall ((x)) 
;; 		(implies (animal x) 
;; 		  (or (forall ((p)) (implies (plant p) (eats x p)))
;; 		      (forall ((a)) (implies (and (animal a) (smaller-than a x)
;; 						  (for-some ((p))
;; 						    (and (plant p)
;; 							 (eats a p))))
;; 				      (eats x a))))))
;; 	      (forall ((b) (c) (s) (f) (w))
;; 		(implies (and (bird b) (catepillar c) (snail s) (wolf w)
;; 			      (fox f))
;; 		  (and (smaller-than c b) (smaller-than s b)
;; 		       (smaller-than b f) (smaller-than f w))))
;; 	      (forall ((w) (f) (g))
;; 		(implies (and (wolf w) (fox f) (grain g))
;; 		  (and (not (eats w f)) (not (eats w g)))))
;; 	      (forall ((b) (c) (s))
;; 		(implies (and (bird b) (catepillar c) (snail s))
;; 		  (and (eats b c) (not (eats b s)))))
;; 	      (forall ((c))
;; 		(implies (catepillar c)
;; 		  (for-some ((p)) (and (plant p) (eats c p)))))
;; 	      (forall ((s))
;; 		(implies (snail s)
;; 		  (for-some ((p)) (and (plant p) (eats s p))))))
;;   (for-some ((a)) (and (animal a) (for-some ((ag) (g))
;; 				    (and (grain g) (animal ag) (eats ag g)
;; 					 (eats a ag)))))))

